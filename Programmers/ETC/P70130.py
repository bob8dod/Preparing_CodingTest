# 프로그래머스 월간 코드 챌린지 시즌1 P70130 스타수열
"""
처음 부분집합의 개념으로 접근했다가 틀림.
부분수열임. 즉, 부분집합을 만드는데, 순서를 고려한다는 것.

[핵심]
어떻게든 두 연속된 원소로 윈도우를 만들면 해당 숫자의 최적의 스타수열이 만들어짐
즉, 결론적인 스타수열은 연속된 두 원소의 집합으로 생성된다는 것.
즉, 중간에 띄어서 만들어지지 않음. (차피 결과는 띄우나 붙이나 똑같다는 것)

[풀이]
모든 원소에 대해 탐색을 실행해야됨. (가장 많이 나온 애로 확정짓고 탐색하면 안됨 -> 그 애가 연속된 수열일 수 있기에. -> 1111123)
이때 시간초과를 방지하기 위해 현재 원소의 개수를 통해 만들 수 있는 수열의 최대 길이를 이용. 
"""


from collections import Counter

def solution(a):
    answer = 0
    el = Counter(a)
    for e,v in el.items():
        if v*2 <= answer : continue
        tem = 0
        i = 0
        while i < len(a)-1:
            # 1. 내가 지금 선택한 원소를 해당 윈도우안에 필수로 포함해야 됨
            # 2. 그 윈도우안에 똑같은 원소가 있으면 안됨
            if (a[i] == e or a[i+1] == e) and (a[i]!=a[i+1]):
                tem += 2
                i += 2
            else:
                i += 1

        answer = max(tem, answer)

    return answer


print(solution([2, 3, 4, 1, 1, 1, 1, 5, 6, 7]))
